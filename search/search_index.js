var __index = {"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Data Engineering and DSA","text":""},{"location":"DSA/code.html","title":"code","text":""},{"location":"DSA/code.html#week1","title":"Week1","text":"<ol> <li>Arrays &amp; Hashing: Contains Duplicate, Valid Anagram, Two Sum</li> <li>Pointers: Valid Palindrome, Two Sum II Input Array Is Sorted</li> <li>Sliding Window: Best Time to Buy And Sell Stock, Longest Substring Without Repeating Characters</li> <li>Stack: Valid Parentheses, Min Stack</li> <li>Binary Search: Binary Search, Search a 2D Matrix</li> <li>LinkedList: Reverse Linked List, Merge Two Sorted Lists</li> <li>Trees: Invert Binary Tree, Maximum Depth of Binary Tree</li> </ol>"},{"location":"DSA/code.html#contains-duplicate","title":"Contains Duplicate","text":"<pre><code>def containsDuplicate(self, nums: List[int]) -&gt; bool:\n        array_set = {}\n        for i in nums:\n            if(i in array_set):\n                return true\n            array_set.add(i)\n        return false\n</code></pre>"},{"location":"DSA/code.html#valid-anagram","title":"Valid Anagram","text":"<pre><code>def isAnagram(self, s: str, t: str) -&gt; bool:\n        if len(s) != len(t):\n            return False\n        s_dict = {}\n        t_dict = {}\n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i],0)+1\n            t_dict[t[i]] = t_dict.get(t[i],0)+1\n        return s_dict==t_dict\n</code></pre>"},{"location":"DSA/code.html#two-sum","title":"Two Sum","text":"<pre><code>def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        hashmap = {}\n        for i, num in enumerate(nums):\n            diff = target - num\n            if diff in hashmap:\n                return [hashmap[diff],i]\n            hashmap[num] = i\n        return [-1,-1]\n</code></pre>"},{"location":"DSA/code.html#valid-palindrome","title":"Valid Palindrome","text":"<pre><code>def isPalindrome(self, s: str) -&gt; bool:\n        left, right = 0, len(s) - 1\n        while(left &lt; right):\n            while(left&lt;right and not s[left].isalnum()):\n                left +=1\n            while(left&lt;right and not s[right].isalnum()):\n                right -=1\n            if(s[left].lower() != s[right].lower()):\n                return False\n            right -=1\n            left +=1\n        return True\n</code></pre>"},{"location":"DSA/code.html#two-sum-ii-input-array-is-sorted","title":"Two Sum II Input Array Is Sorted","text":"<pre><code>def twoSum(self, numbers: List[int], target: int) -&gt; List[int]:\n        left,right = 0, len(numbers) -1\n        while( left &lt; right):\n            if((numbers[left] + numbers[right])==target):\n                return [left+1,right+1]\n            elif((numbers[left] + numbers[right])&lt;target):\n                left+=1\n            else:\n                right-=1\n        return [-1,-1]\n</code></pre>"},{"location":"DSA/code.html#best-time-to-buy-and-sell-stock","title":"Best Time to Buy And Sell Stock","text":"<pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n        minprice = prices[0]\n        maxprofit =0\n        for price in prices:\n            minprice = min(price,minprice)\n            profit = price- minprice\n            maxprofit = max(profit,maxprofit)\n        return maxprofit\n</code></pre>"},{"location":"DSA/code.html#longest-substring-without-repeating-characters","title":"Longest Substring Without Repeating Characters","text":"<pre><code>def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        hashset = set()\n        left = 0\n        maxlength = 0\n        for right in range(len(s)):\n            while(s[right] in hashset):\n                hashset.remove(s[left])\n                left+=1\n            hashset.add(s[right])\n            maxlength = max(right-left+1,maxlength)\n        return maxlength\n</code></pre>"},{"location":"DSA/code.html#valid-parentheses","title":"Valid Parentheses","text":"<pre><code>def isValid(self, s: str) -&gt; bool:\n        mapping = {'}':'{',\"]\":\"[\",\")\":\"(\"}\n        stack =[]\n        for char in s:\n            if char in mapping:\n                topelement = stack.pop() if stack else \"#\"\n                if mapping[char] != topelement:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n</code></pre>"},{"location":"DSA/code.html#min-stack","title":"Min Stack","text":"<pre><code>class MinStack:\n    def __init__(self):\n        self.stack = []\n        self.minstack = []\n\n\n    def push(self, val: int) -&gt; None:\n        self.stack.append(val)\n        if(not self.minstack or val&lt;=self.minstack[-1]):\n            self.minstack.append(val)\n\n\n    def pop(self) -&gt; None:\n        val = self.stack.pop()\n        if(val==self.minstack[-1]):\n            self.minstack.pop()\n\n\n    def top(self) -&gt; int:\n        return self.stack[-1]\n\n\n    def getMin(self) -&gt; int:\n        return self.minstack[-1]\n</code></pre>"},{"location":"DSA/code.html#binary-search","title":"Binary Search","text":"<pre><code>def search(self, nums: List[int], target: int) -&gt; int:\n        left,right = 0, len(nums) -1\n        while(left &lt;= right):\n            mid = (left+right) // 2\n            if(nums[mid] == target):\n                return mid\n            elif nums[mid] &gt; target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1\n</code></pre>"},{"location":"DSA/code.html#search-a-2d-matrix","title":"Search a 2D Matrix","text":"<pre><code> def searchMatrix(self, matrix: List[List[int]], target: int) -&gt; bool:\n        top, bottom = 0, len(matrix) -1\n        while(top&lt;=bottom):\n            row = (top+bottom)//2\n            if(target&lt;matrix[row][0]):\n                bottom = row -1\n            elif(target&gt;matrix[row][-1]):\n                top = row +1\n            else:\n                break\n        if(not top&lt;=bottom):\n            return False\n        row = (top+bottom)//2\n        left, right = 0, len(matrix[row]) -1\n        while(left&lt;=right):\n            mid =  (left+right)//2\n            if(target == matrix[row][mid]):\n                return True\n            elif(target&lt;matrix[row][mid]):\n                right = mid-1\n            else:\n                left = mid+1\n        return False\n</code></pre>"},{"location":"DSA/code.html#reverse-linked-list","title":"Reverse Linked List","text":"<pre><code>def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        prev = None\n        curr = head\n        while(curr):\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        return prev\n</code></pre>"},{"location":"DSA/code.html#merge-two-sorted-lists","title":"Merge Two Sorted Lists","text":"<pre><code>def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:\n        prevhead = ListNode(-1)\n        curr  = prevhead\n        while(list1 and list2):\n            if(list1.val&lt;=list2.val):\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        curr.next = list1 if list1 else list2\n        return prevhead.next\n</code></pre>"},{"location":"DSA/code.html#invert-binary-tree","title":"Invert Binary Tree","text":"<p><pre><code>def invertTree(self, root: Optional[TreeNode]) -&gt; Optional[TreeNode]:\n         if not root:\n             return None\n         root.left,root.right = root.right,root.left\n         self.invertTree(root.left)\n         self.invertTree(root.right)\n         return root\n</code></pre> <pre><code>from collections import deque\n def invertTree(self, root: Optional[TreeNode]) -&gt; Optional[TreeNode]:\n        if not root:\n            return None\n        queue = deque([root])\n        while queue:\n            current = queue.popleft()\n            current.left,current.right = current.right, current.left\n            if current.left:\n                queue.append(current.left)\n            if current.right:\n                queue.append(current.right)\n        return root\n</code></pre></p>"},{"location":"DSA/code.html#maximum-depth-of-binary-tree","title":"Maximum Depth of Binary Tree","text":"<p><pre><code>def maxDepth(self, root: Optional[TreeNode]) -&gt; int:\n        if not root:\n            return 0\n        leftdepth = self.maxDepth(root.left)\n        rightdepth = self.maxDepth(root.right)\n        return max(leftdepth,rightdepth)+1\n</code></pre> <pre><code>from collections import deque\ndef maxDepth(self, root: Optional[TreeNode]) -&gt; int:\n        if not root:\n            return 0\n        queue = deque([root])\n        depth = 0\n        while queue:\n            depth += 1\n            size = len(queue)\n            for _ in range(size):\n                current = queue.popleft()\n                if current.left:\n                    queue.append(current.left)\n                if current.right:\n                    queue.append(current.right)\n        return depth\n</code></pre></p>"},{"location":"SQL/1.introduction.html","title":"1.Introduction","text":""},{"location":"SQL/1.introduction.html#database-types","title":"Database Types","text":"<p>A database is a structured collection of data organized in a way that allows for efficient storage, retrieval, and manipulation of that data. Databases play a crucial role in modern computing, providing a systematic and organized approach to managing and storing information. They are used in various applications, ranging from simple tasks like storing contact information to complex systems handling large volumes of data in enterprises.</p>"},{"location":"SQL/1.introduction.html#relational-databases-rdbms","title":"Relational Databases (RDBMS)","text":"<ul> <li>Examples: MySQL, PostgreSQL, Oracle, Microsoft SQL Server</li> <li>Structure: Data is organized into tables with rows and columns.</li> <li>Relationships: Tables can be related through keys (primary and foreign keys).</li> <li>Use: Suitable for structured and tabular data.</li> </ul>"},{"location":"SQL/1.introduction.html#nosql-databases","title":"NoSQL Databases","text":"<ul> <li>Examples: MongoDB, Cassandra, Redis</li> <li>Structure: Data is stored in a non-tabular format, such as key-value pairs, documents, or graphs.</li> <li>Use: Suitable for unstructured or semi-structured data, and when scalability and flexibility are essential.</li> </ul>"},{"location":"SQL/1.introduction.html#object-oriented-databases","title":"Object-Oriented Databases","text":"<ul> <li>Examples: db4o, ObjectDB</li> <li>Structure: Data is stored in the form of objects, similar to object-oriented programming.</li> <li>Use: Suitable for applications with complex data structures and strong ties to object-oriented programming languages.</li> </ul>"},{"location":"SQL/1.introduction.html#graph-databases","title":"Graph Databases","text":"<ul> <li>Examples: Neo4j, Amazon Neptune</li> <li>Structure: Data is represented as nodes, edges, and properties, making it ideal for managing relationships.</li> <li>Use: Effective for scenarios where relationships between entities are crucial, such as social networks and network analysis.</li> </ul>"},{"location":"SQL/1.introduction.html#document-stores","title":"Document Stores","text":"<ul> <li>Examples: CouchDB, Elasticsearch</li> <li>Structure: Data is stored as documents, usually in JSON or XML format.</li> <li>Use: Suitable for semi-structured or hierarchical data, and often used in content management systems.</li> </ul>"},{"location":"SQL/1.introduction.html#in-memory-databases","title":"In-Memory Databases","text":"<ul> <li>Examples: Redis, Memcached</li> <li>Structure: Data is stored in memory rather than on disk, allowing for faster data retrieval.</li> <li>Use: Ideal for applications that require low-latency access to frequently accessed data.</li> </ul>"},{"location":"SQL/1.introduction.html#time-series-databases","title":"Time-Series Databases","text":"<ul> <li>Examples: InfluxDB, Prometheus</li> <li>Structure: Optimized for storing and retrieving time-series data, such as IoT sensor data and system metrics.</li> <li>Use: Suitable for applications where data points are timestamped and queried over time.</li> </ul> <p>Choosing the right type of database depends on the specific requirements of your application, including the nature of your data, performance needs, scalability, and the complexity of relationships within the data.</p> <p>Database (DB), Database Management System (DBMS), and Relational Database Management System (RDBMS) are related concepts but refer to different aspects of managing and organizing data.</p>"},{"location":"SQL/1.introduction.html#database-db-vs-dbms-vs-rdms","title":"Database (DB) vs DBMS vs RDMS:","text":"<p>Database: A database is like a digital library where information is neatly organized and stored on a computer. It's a place where we keep all kinds of things, from simple written notes to pictures and videos. Imagine it as a magical box where we can quickly find and use any information we need.</p> <p>Database Management System (DBMS): Think of a DBMS as a helpful guide or librarian in our digital library. This guide makes sure everything is in order, helps us add new things, find what we're looking for, and keeps everything safe and secure. Popular guides include MySQL, Oracle, and Microsoft SQL Server.</p> <p>Relational Database Management System (RDBMS): An RDBMS is a special kind of guide who loves arranging things in neat tables. Imagine a table like a big grid, with rows going across and columns going down. Each table can hold different types of information, and these tables are like friendly neighbors who talk to each other. For example, think of a table for students and another for their grades. The tables connect using special codes, like student IDs, creating relationships between them.</p> <p>Example: Imagine you have a school database. In one table, you have a list of students with their names, ages, and student IDs. In another table, you have their grades with student IDs linking them back to the first table. So, if you want to know a student's grade, you look at the tables, find their ID, and see the grade \u2013 just like finding a book in the library with the help of our guide!</p> <p>This way, everything stays organized, and we can quickly find who scored the highest or which students are in a particular grade. It's like magic organization for our digital school world!</p> Summary <ul> <li> <p>Database (DB):</p> <ul> <li>Refers to the structured collection of data.</li> </ul> </li> <li> <p>Database Management System (DBMS):</p> <ul> <li>Software that manages and provides an interface to interact with databases.</li> </ul> </li> <li> <p>Relational Database Management System (RDBMS):</p> <ul> <li>Specific type of DBMS.  Organizes data into tables based on the relational model.</li> <li>Emphasizes relationships between tables.</li> </ul> </li> </ul>"},{"location":"SQL/1.introduction.html#database-usage","title":"DataBase Usage","text":"<p>Frontend: Imagine you are in a magical library. The shelves, books, and how you interact with them \u2013 that's the frontend! It's what you see and touch. In a computer world, this could be like a colorful and easy-to-use library website. You click on buttons to search for books, and you see the information about the books on the screen.</p> <p>Example: The frontend is like the library's colorful entrance with big buttons like \"Search\" and \"Read a Book.\" You click on them, and the magic begins!</p> <p>Backend: Now, behind the scenes, there are wizards and fairies working hard to make sure everything runs smoothly. They organize the books on the shelves, keep track of who borrows them, and manage the library's overall operation. In the computer world, this is the backend. It's where the logic, calculations, and data management happen.</p> <p>Example: The backend is like the hidden part of the library where magical creatures organize the books, keep records of who borrowed what, and make sure everything is in order.</p> <p>Database: But, where do all the book details and borrower information go? That's where the enchanted book called the \"Database\" comes in. It's like a big, organized book of spells that keeps track of every book, who borrowed it, and even which shelf it's on.</p> <p>Example: The database is like a magical book that knows everything about every book in the library. When you search for a book on the website, it's the database that quickly finds the information and tells the frontend to show it to you.</p> Summary <p>-Frontend Magic:     - Frontend is what you see \u2013 the colorful library entrance and buttons.</p> <ul> <li> <p>Behind the Scenes (Backend):</p> <ul> <li>Backend is the magical creatures behind the scenes managing everything.</li> </ul> </li> <li> <p>Database Enchantment:</p> <ul> <li>Database is the enchanted book keeping track of all the details about every book.</li> </ul> </li> </ul>"},{"location":"SQL/1.introduction.html#architecture","title":"Architecture","text":""},{"location":"SQL/2.SQL%20Basics.html","title":"2.Basics","text":"<p>SQL (Structured Query Language):</p> <p>SQL, or Structured Query Language, is a programming language used for managing and manipulating relational databases. It allows users to interact with databases by defining and manipulating data. SQL is essential for tasks such as querying databases, updating records, inserting new data, and creating or modifying database structures.</p> <p>Example:</p> <p>Let's consider a simple scenario of a library database. We want to retrieve information about books that are available in the library.</p> <pre><code>-- SQL Query to Retrieve Book Information\nSELECT BookTitle, Author, PublicationYear\nFROM Books\nWHERE Status = 'Available';\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>SELECT</code>: This keyword is used to specify the columns that you want to retrieve from the database.</p> </li> <li> <p><code>BookTitle, Author, PublicationYear</code>: These are the column names we want to retrieve information from.</p> </li> <li> <p><code>FROM Books</code>: Specifies the table (in this case, \"Books\") from which to retrieve the data.</p> </li> <li> <p><code>WHERE Status = 'Available'</code>: This part filters the results to only include books with the status \"Available.\"</p> </li> </ul> <p>In simple terms, this SQL query is like asking the database: \"Give me the titles, authors, and publication years of all available books from the 'Books' table.\"</p> <p>The database will then respond with a list of books that match the specified conditions. SQL queries are powerful tools for managing and extracting information from databases, and they can become more complex depending on the requirements of the task at hand.</p>"},{"location":"SQL/2.SQL%20Basics.html#what-can-sql-do","title":"What Can SQL do?","text":"<ul> <li>SQL can execute queries against a database.</li> <li>SQL can retrieve data from a database.</li> <li>SQL can insert records in a database.</li> <li>SQL can update records in a database.</li> <li>SQL can delete records from a database.</li> <li>SQL can create new databases.</li> <li>SQL can create new tables in a database.</li> <li>SQL can create stored procedures in a database.</li> <li>SQL can create views in a database.</li> <li>SQL can set permissions on tables, procedures, and views.</li> </ul>"},{"location":"SQL/2.SQL%20Basics.html#sql-data-types","title":"SQL Data Types","text":"Data Type Description Length INT Integer - VARCHAR(size) Variable-length character string 1 to 65,535 bytes CHAR(size) Fixed-length character string Up to 255 bytes TEXT Variable-length text Up to 65,535 bytes DATE Date (YYYY-MM-DD) - TIME Time (HH:MM:SS) - DATETIME Date and time (YYYY-MM-DD HH:MM:SS) - TIMESTAMP Timestamp - FLOAT Floating-point number - DOUBLE Double-precision floating-point number - DECIMAL(p, s) Fixed-point number - BOOLEAN Boolean value (0 or 1) - ENUM(val1, val2) Enumeration of possible values - SET(val1, val2) Set of possible values - BLOB Binary Large Object (for binary data) Up to 65,535 bytes <p>DDL, or Data Definition Language, commands in SQL are used to define the structure of a database. These commands enable the creation, modification, and deletion of database objects, such as tables and indexes. Here are some common DDL commands along with examples:</p>"},{"location":"SQL/2.SQL%20Basics.html#ddl","title":"DDL","text":""},{"location":"SQL/2.SQL%20Basics.html#1-create","title":"1. CREATE:","text":"<p>The <code>CREATE</code> command is used to create a new database object, such as a table.</p> <p>Example: Creating a Table <pre><code>CREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    hire_date DATE\n);\n</code></pre> This example creates a table named \"employees\" with columns for employee ID, first name, last name, and hire date.</p>"},{"location":"SQL/2.SQL%20Basics.html#2-alter","title":"2. ALTER:","text":"<p>The <code>ALTER</code> command is used to modify the structure of an existing database object.</p> <p>Example: Adding a Column to a Table <pre><code>ALTER TABLE employees\nADD department VARCHAR(50);\n</code></pre> This example adds a new column named \"department\" to the existing \"employees\" table.</p>"},{"location":"SQL/2.SQL%20Basics.html#3-drop","title":"3. DROP:","text":"<p>The <code>DROP</code> command is used to delete a database object, such as a table or database.</p> <p>Example: Dropping a Table <pre><code>DROP TABLE employees;\n</code></pre> This example deletes the \"employees\" table and removes all data associated with it.</p>"},{"location":"SQL/2.SQL%20Basics.html#4-truncate","title":"4. TRUNCATE:","text":"<p>The <code>TRUNCATE</code> command is used to remove all records from a table but keep the table structure for future use.</p> <p>Example: Truncating a Table <pre><code>TRUNCATE TABLE employees;\n</code></pre> This example removes all records from the \"employees\" table, leaving the table structure intact.</p>"},{"location":"SQL/2.SQL%20Basics.html#5-rename","title":"5. RENAME:","text":"<p>Although not supported in all database systems, the <code>RENAME</code> command is used to rename an existing database object.</p> <p>Example: Renaming a Table <pre><code>-- Syntax varies by database system\nRENAME TABLE old_table_name TO new_table_name;\n</code></pre> This example illustrates the concept, but syntax may differ between database systems.</p> <p>These DDL commands play a crucial role in defining and modifying the structure of a database, allowing users to create, alter, and delete database objects as needed.</p> <p>Certainly! Let's delve into the explanations of the DML (Data Manipulation Language) commands: INSERT, UPDATE, and DELETE in SQL.</p>"},{"location":"SQL/2.SQL%20Basics.html#dml","title":"DML","text":""},{"location":"SQL/2.SQL%20Basics.html#1-insert","title":"1. INSERT:","text":"<p>The <code>INSERT</code> command is used to add new records or rows into a table.</p> <p>Example: Inserting Data into a Table <pre><code>-- Inserting a new employee record\nINSERT INTO employees (employee_id, first_name, last_name, hire_date)\nVALUES (101, 'John', 'Doe', '2022-03-01');\n</code></pre></p> <p>In this example: - <code>employees</code> is the table name. - <code>(employee_id, first_name, last_name, hire_date)</code> lists the columns where data will be inserted. - <code>VALUES (101, 'John', 'Doe', '2022-03-01')</code> provides the actual data to be inserted into the specified columns.</p>"},{"location":"SQL/2.SQL%20Basics.html#2-update","title":"2. UPDATE:","text":"<p>The <code>UPDATE</code> command is used to modify existing records in a table.</p> <p>Example: Updating Data in a Table <pre><code>-- Updating the last name of the employee with ID 101\nUPDATE employees\nSET last_name = 'Smith'\nWHERE employee_id = 101;\n</code></pre></p> <p>In this example: - <code>employees</code> is the table name. - <code>SET last_name = 'Smith'</code> updates the value of the <code>last_name</code> column. - <code>WHERE employee_id = 101</code> specifies the condition for updating records; in this case, only the record with <code>employee_id</code> equal to 101.</p>"},{"location":"SQL/2.SQL%20Basics.html#3-delete","title":"3. DELETE:","text":"<p>The <code>DELETE</code> command is used to remove records from a table.</p> <p>Example: Deleting Data from a Table <pre><code>-- Deleting the employee with ID 101\nDELETE FROM employees\nWHERE employee_id = 101;\n</code></pre></p> <p>In this example: - <code>employees</code> is the table name. - <code>WHERE employee_id = 101</code> specifies the condition for deleting records; in this case, only the record with <code>employee_id</code> equal to 101.</p> <p>These DML commands are fundamental for managing and manipulating data within SQL databases. They enable the insertion of new data, modification of existing data, and deletion of unwanted data, providing the flexibility needed to maintain and update the database content.</p> <p>DCL, or Data Control Language, commands in SQL are used to control access to the database by granting or revoking privileges to users. The two main DCL commands are GRANT and REVOKE.</p>"},{"location":"SQL/2.SQL%20Basics.html#dcl","title":"DCL","text":""},{"location":"SQL/2.SQL%20Basics.html#1-grant","title":"1. GRANT:","text":"<p>The <code>GRANT</code> command is used to give specific privileges to users or roles. Privileges define the type of operations a user or role is allowed to perform on a database object.</p> <p>Example: Granting SELECT Privilege on a Table <pre><code>-- Granting SELECT privilege on the \"employees\" table to the user \"john\"\nGRANT SELECT ON employees TO john;\n</code></pre></p> <p>In this example: - <code>SELECT</code> is the privilege being granted. - <code>employees</code> is the table on which the privilege is granted. - <code>john</code> is the user to whom the privilege is granted.</p>"},{"location":"SQL/2.SQL%20Basics.html#2-revoke","title":"2. REVOKE:","text":"<p>The <code>REVOKE</code> command is used to take back or remove previously granted privileges from users or roles.</p> <p>Example: Revoking SELECT Privilege on a Table <pre><code>-- Revoking SELECT privilege on the \"employees\" table from the user \"john\"\nREVOKE SELECT ON employees FROM john;\n</code></pre></p> <p>In this example: - <code>SELECT</code> is the privilege being revoked. - <code>employees</code> is the table from which the privilege is revoked. - <code>john</code> is the user from whom the privilege is revoked.</p> <p>These DCL commands are crucial for managing the security and access control of a database. They ensure that only authorized users or roles can perform specific operations on the database objects, helping to maintain data integrity and protect sensitive information.</p> <p>TCL, or Transaction Control Language, commands in SQL are used to manage transactions within a database. Transactions are sequences of one or more SQL statements that are executed as a single unit of work. TCL commands help in controlling the flow of these transactions.</p>"},{"location":"SQL/2.SQL%20Basics.html#tcl","title":"TCL","text":""},{"location":"SQL/2.SQL%20Basics.html#1-commit","title":"1. COMMIT:","text":"<p>The <code>COMMIT</code> command is used to permanently save the changes made during the current transaction.</p> <p>Example: Committing a Transaction <pre><code>-- Beginning of the transaction\nSTART TRANSACTION;\n\n-- SQL statements modifying data\n\n-- Committing the changes made in the transaction\nCOMMIT;\n</code></pre></p> <p>In this example: - <code>START TRANSACTION</code> begins a transaction. - SQL statements within the transaction modify data. - <code>COMMIT</code> saves the changes made in the transaction permanently. If the transaction is successful, the changes become permanent; otherwise, they are rolled back.</p>"},{"location":"SQL/2.SQL%20Basics.html#2-rollback","title":"2. ROLLBACK:","text":"<p>The <code>ROLLBACK</code> command is used to undo the changes made during the current transaction.</p> <p>Example: Rolling Back a Transaction <pre><code>-- Beginning of the transaction\nSTART TRANSACTION;\n\n-- SQL statements modifying data\n\n-- Something went wrong, rolling back the changes\nROLLBACK;\n</code></pre></p> <p>In this example: - <code>START TRANSACTION</code> begins a transaction. - SQL statements within the transaction modify data. - If something goes wrong, <code>ROLLBACK</code> is used to undo the changes made during the transaction.</p>"},{"location":"SQL/2.SQL%20Basics.html#3-savepoint","title":"3. SAVEPOINT:","text":"<p>The <code>SAVEPOINT</code> command is used to set a point within a transaction to which you can later roll back.</p> <p>Example: Setting a Savepoint <pre><code>-- Beginning of the transaction\nSTART TRANSACTION;\n\n-- SQL statements modifying data\n\n-- Setting a savepoint\nSAVEPOINT my_savepoint;\n\n-- More SQL statements modifying data\n\n-- Rolling back to the savepoint\nROLLBACK TO my_savepoint;\n</code></pre></p> <p>In this example: - <code>START TRANSACTION</code> begins a transaction. - SQL statements within the transaction modify data. - <code>SAVEPOINT my_savepoint</code> sets a savepoint within the transaction. - More SQL statements modify data. - <code>ROLLBACK TO my_savepoint</code> rolls back the transaction to the specified savepoint, undoing changes made after that point.</p> <p>TCL commands ensure data consistency and integrity by controlling the execution and outcome of transactions within a database.</p> <p>DQL, or Data Query Language, is a subset of SQL (Structured Query Language) used for querying and retrieving data from a database. The primary DQL command is <code>SELECT</code>, which is employed to retrieve data from one or more tables based on specified conditions.</p>"},{"location":"SQL/2.SQL%20Basics.html#dql","title":"DQL","text":""},{"location":"SQL/2.SQL%20Basics.html#select-syntax","title":"SELECT Syntax:","text":"<p>The basic syntax of the <code>SELECT</code> statement is as follows:</p> <pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n</code></pre> <ul> <li><code>column1, column2, ...</code>: The columns you want to retrieve data from.</li> <li><code>table_name</code>: The name of the table from which you want to retrieve data.</li> <li><code>WHERE condition</code>: Optional. Specifies conditions that the data must meet for inclusion in the result set.</li> </ul>"},{"location":"SQL/2.SQL%20Basics.html#example-retrieving-data-from-a-table","title":"Example: Retrieving Data from a Table","text":"<p>Let's consider a simple table named <code>employees</code>:</p> <pre><code>SELECT employee_id, first_name, last_name, hire_date\nFROM employees\nWHERE department = 'IT';\n</code></pre> <p>In this example: - <code>employee_id</code>, <code>first_name</code>, <code>last_name</code>, and <code>hire_date</code> are the columns being selected. - <code>employees</code> is the table from which the data is retrieved. - <code>WHERE department = 'IT'</code> is an optional condition specifying that only records with the department 'IT' should be included in the result set.</p>"},{"location":"SQL/2.SQL%20Basics.html#additional-select-features","title":"Additional SELECT Features:","text":"<ol> <li>Alias Names:    You can use aliases to provide temporary names to columns or tables in the result set.</li> </ol> <pre><code>SELECT first_name AS \"First Name\", last_name AS \"Last Name\"\nFROM employees;\n</code></pre> <ol> <li>Aggregate Functions:    You can use aggregate functions like <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MAX</code>, and <code>MIN</code> to perform calculations on data.</li> </ol> <pre><code>SELECT AVG(salary) AS \"Average Salary\"\nFROM employees\nWHERE department = 'Finance';\n</code></pre> <ol> <li>Sorting:    You can use the <code>ORDER BY</code> clause to sort the result set based on one or more columns.</li> </ol> <pre><code>SELECT employee_id, first_name, last_name\nFROM employees\nORDER BY last_name, first_name;\n</code></pre> <ol> <li>Filtering:    The <code>WHERE</code> clause allows you to filter data based on specified conditions.</li> </ol> <pre><code>SELECT product_name, price\nFROM products\nWHERE price &gt; 100;\n</code></pre> <ol> <li>JOIN Operations: <code>SELECT</code> can be used with <code>JOIN</code> operations to combine data from multiple tables.</li> </ol> <pre><code>SELECT employees.first_name, employees.last_name, departments.department_name\nFROM employees\nINNER JOIN departments ON employees.department_id = departments.department_id;\n</code></pre> <p>The <code>SELECT</code> command is a versatile and powerful tool for querying databases, allowing you to retrieve specific data based on your requirements.</p>"},{"location":"SQL/2.SQL%20Basics.html#sql-constraints","title":"SQL Constraints","text":"<p>SQL constraints are used to specify rules for the data in a table. Constraints are employed to limit the type of data that can go into a table, ensuring the accuracy and reliability of the data. If there is any violation between the constraint and the data action, the action is aborted. Constraints can be at the column level or table level.</p> <p>The following constraints are commonly used in SQL:</p> <ul> <li> <p>NOT NULL: Ensures that a column cannot have a NULL value.</p> </li> <li> <p>UNIQUE: Ensures that all values in a column are different.</p> </li> <li> <p>PRIMARY KEY: A combination of NOT NULL and UNIQUE. Uniquely identifies each row in a table.</p> </li> <li> <p>FOREIGN KEY: Prevents actions that would destroy links between tables.</p> </li> <li> <p>CHECK: Ensures that the values in a column satisfy a specific condition.</p> </li> <li> <p>DEFAULT: Sets a default value for a column if no value is specified.</p> </li> </ul> Things to Remember <ul> <li> <p>Case Sensitivity:</p> <ul> <li>SQL keywords are NOT case-sensitive: <code>select</code> is the same as <code>SELECT</code>.</li> </ul> </li> <li> <p>Statement Termination:</p> <ul> <li>Some database systems require a semicolon at the end of each SQL statement.</li> </ul> </li> <li> <p>Semicolon Usage:</p> <ul> <li>Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.</li> </ul> </li> </ul>"},{"location":"SQL/Assignments/SQL/Assignment-1.html","title":"Assignment 1","text":""},{"location":"SQL/Assignments/SQL/Assignment-1.html#sql-assignment1","title":"SQL Assignment1","text":"<ol> <li>Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA. The CITY table is described as follows:</li> </ol> Answer"},{"location":"SQL/Assignments/SQL/Assignment-1.html#creating-the-city-table","title":"Creating the CITY Table","text":"<pre><code>CREATE TABLE CITY\n(\n    ID INT,\n    NAME VARCHAR(17),\n    COUNTRYCODE VARCHAR(3),\n    DISTRICT VARCHAR(20),\n    POPULATION INT\n);\n</code></pre> <p>This SQL command creates a table named CITY with columns ID (integer), NAME (varchar with a maximum length of 17 characters), COUNTRYCODE (varchar with a maximum length of 3 characters), DISTRICT (varchar with a maximum length of 20 characters), and POPULATION (integer).</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#describing-the-city-table","title":"Describing the CITY Table","text":"<pre><code>DESCRIBE CITY;\n</code></pre> <p>This command is used to display information about the structure of the CITY table, including the column names, data types, and any constraints.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#inserting-data-into-the-city-table","title":"Inserting Data into the CITY Table","text":"<pre><code>INSERT INTO CITY VALUES\n(6, 'Rotterdam', 'NLD', 'Zuid-Holland', 593321),\n(3878, 'Scottsdale', 'USA', 'Arizona', 202705),\n-- (and additional rows)\n;\n</code></pre> <p>These commands insert data into the CITY table, providing values for the ID, NAME, COUNTRYCODE, DISTRICT, and POPULATION columns for each row.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#selecting-all-rows-from-the-city-table","title":"Selecting All Rows from the CITY Table","text":"<pre><code>SELECT * FROM CITY;\n</code></pre> <p>This command retrieves all rows from the CITY table, displaying the values in all columns for each row.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#filtering-rows-based-on-conditions","title":"Filtering Rows Based on Conditions","text":"<pre><code>SELECT ID, NAME, COUNTRYCODE, DISTRICT, POPULATION\nFROM CITY\nWHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 100000;\n</code></pre> <p>This query selects specific columns from the CITY table for rows where the COUNTRYCODE is 'USA' and the POPULATION is greater than 100,000.</p>"},{"location":"SQL/Assignments/SQL/Assignment-1.html#alternative-query-with-asterisk","title":"Alternative Query with Asterisk","text":"<pre><code>SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION &gt; 100000;\n</code></pre> <p>This is an equivalent query to the previous one, but it selects all columns using the asterisk (*) wildcard.</p>"},{"location":"SQL/Exercise/Exercise1.html","title":"Exercise1","text":""},{"location":"SQL/Exercise/Exercise1.html#sql-commands","title":"SQL Commands","text":""},{"location":"SQL/Exercise/Exercise1.html#show-databases","title":"Show Databases","text":"<pre><code>SHOW DATABASES;\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#create-database","title":"Create Database","text":"<pre><code>CREATE DATABASE noob_db;\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#drop-database","title":"Drop Database","text":"<pre><code>DROP DATABASE first_demo;\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#use-database","title":"Use Database","text":"<pre><code>USE noob_db;\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#create-table","title":"Create Table","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee (\n    id INT,\n    emp_name VARCHAR(20)\n);\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#show-tables","title":"Show Tables","text":"<pre><code>SHOW TABLES;\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#show-table-definition","title":"Show Table Definition","text":"<pre><code>SHOW CREATE TABLE employee;\n</code></pre> <p>The <code>SHOW CREATE TABLE</code> statement in SQL is a useful command that displays the <code>CREATE TABLE</code> statement that would create an exact copy of the existing table specified. This command is particularly handy when you want to understand how a table is structured, including its column definitions, data types, default values, and any constraints like primary keys, foreign keys, unique constraints, check constraints, and indexes associated with the table.</p>"},{"location":"SQL/Exercise/Exercise1.html#create-table-with-more-columns","title":"Create Table with More Columns","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee_v1 (\n    id INT,\n    name VARCHAR(50),\n    salary DOUBLE, \n    hiring_date DATE \n);\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#insert-data-syntax-1","title":"Insert Data Syntax 1","text":"<pre><code>INSERT INTO employee_v1 VALUES(1, 'Shashank', 1000, '2021-09-15');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#insert-data-syntax-2","title":"Insert Data Syntax 2","text":"<pre><code>INSERT INTO employee_v1(salary, name, id) VALUES(2000, 'Rahul', 2);\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#insert-multiple-records","title":"Insert Multiple Records","text":"<pre><code>INSERT INTO employee_v1 VALUES\n    (3, 'Amit', 5000, '2021-10-28'),\n    (4, 'Nitin', 3500, '2021-09-16'),\n    (5, 'Kajal', 4000, '2021-09-20');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#fetch-data-from-table","title":"Fetch Data from Table","text":"<pre><code>SELECT * FROM employee_v1;\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#table-with-integrity-constraints","title":"Table with Integrity Constraints","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee_with_constraints (\n    id INT,\n    name VARCHAR(50) NOT NULL,\n    salary DOUBLE, \n    hiring_date DATE DEFAULT '2021-01-01',\n    UNIQUE (id),\n    CHECK (salary &gt; 1000)\n);\n</code></pre> <ul> <li>Column-level constraints are defined immediately after the column definition. This includes <code>NOT NULL</code> and <code>DEFAULT</code> values, which are attributes of individual columns.</li> <li>Table-level constraints are defined after all columns have been defined. Examples include <code>UNIQUE</code>, <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, and <code>CHECK</code> constraints that might span multiple columns.</li> </ul>"},{"location":"SQL/Exercise/Exercise1.html#integrity-constraint-failure-1","title":"Integrity Constraint Failure 1","text":"<pre><code>-- Exception: Column 'name' cannot be null\nINSERT INTO employee_with_constraints VALUES(1, null, 3000, '2021-11-20');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#correct-record-for-integrity-constraint-1","title":"Correct Record for Integrity Constraint 1","text":"<pre><code>INSERT INTO employee_with_constraints VALUES(1, 'Shashank', 3000, '2021-11-20');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#integrity-constraint-failure-2","title":"Integrity Constraint Failure 2","text":"<pre><code>-- Exception: Duplicate entry '1' for key 'employee_with_constraints.id'\nINSERT INTO employee_with_constraints VALUES(1, 'Rahul', 5000, '2021-10-23');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#correct-record-for-unique-constraint","title":"Correct Record for Unique Constraint","text":"<pre><code>-- Unique can accept NULL\nINSERT INTO employee_with_constraints VALUES(null, 'Rahul', 5000, '2021-10-23');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#integrity-constraint-failure-3","title":"Integrity Constraint Failure 3","text":"<pre><code>-- Exception: Duplicate entry NULL for key 'employee_with_constraints.id'\nINSERT INTO employee_with_constraints VALUES(null, 'Rajat', 2000, '2020-09-20');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#integrity-constraint-failure-4","title":"Integrity Constraint Failure 4","text":"<pre><code>-- Exception: Check constraint 'employee_with_constraints_chk_1' is violated\nINSERT INTO employee_with_constraints VALUES(5, 'Amit', 500, '2023-10-24');\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#test-default-date-constraint","title":"Test Default Date Constraint","text":"<pre><code>-- Test for Default Date Constraint\nINSERT INTO employee_with_constraints(id, name, salary) VALUES(7, 'Neeraj', 3000);\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#select-data-from-table-with-constraints","title":"Select Data from Table with Constraints","text":"<pre><code>SELECT * FROM employee_with_constraints;\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#table-with-constraints-alternate-syntax","title":"Table with Constraints (Alternate Syntax)","text":"<pre><code>CREATE TABLE IF NOT EXISTS employee_with_constraints_tmp (\n    id INT,\n    name VARCHAR(50) NOT NULL,\n    salary DOUBLE, \n    hiring_date DATE DEFAULT '2021-01-01',\n    CONSTRAINT unique_emp_id UNIQUE (id),\n    CONSTRAINT salary_check CHECK (salary &gt; 1000)\n);\n</code></pre>"},{"location":"SQL/Exercise/Exercise1.html#check-constraint-failure-with-name","title":"Check Constraint Failure with Name","text":"<pre><code>-- Exception: Check constraint 'salary_check' is violated\nINSERT INTO employee_with_constraints_tmp VALUES(5, 'Amit', 500, '2023-10-24');\n</code></pre>"}]}